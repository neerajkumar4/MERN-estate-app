{"ast":null,"code":"import { checkRequired, createValidator, createValidatorAsync, isEmpty, formatErrorMessage } from './utils';\nimport locales from './locales';\nexport class MixedType {\n  constructor(name) {\n    this.required = false;\n    this.requiredMessage = '';\n    this.trim = false;\n    this.emptyAllowed = false;\n    this.rules = [];\n    this.priorityRules = [];\n    this.typeName = name;\n    this.locale = Object.assign(name ? locales[name] : {}, locales.mixed);\n  }\n  setSchemaOptions(schemaSpec, value) {\n    this.schemaSpec = schemaSpec;\n    this.value = value;\n  }\n  check(value = this.value, data, fieldName) {\n    if (this.required && !checkRequired(value, this.trim, this.emptyAllowed)) {\n      return {\n        hasError: true,\n        errorMessage: formatErrorMessage(this.requiredMessage, {\n          name: fieldName\n        })\n      };\n    }\n    const validator = createValidator(data, fieldName);\n    const checkStatus = validator(value, this.priorityRules);\n    if (checkStatus) {\n      return checkStatus;\n    }\n    if (!this.required && isEmpty(value)) {\n      return {\n        hasError: false\n      };\n    }\n    return validator(value, this.rules) || {\n      hasError: false\n    };\n  }\n  checkAsync(value = this.value, data, fieldName) {\n    if (this.required && !checkRequired(value, this.trim, this.emptyAllowed)) {\n      return Promise.resolve({\n        hasError: true,\n        errorMessage: formatErrorMessage(this.requiredMessage, {\n          name: fieldName\n        })\n      });\n    }\n    const validator = createValidatorAsync(data, fieldName);\n    return new Promise(resolve => validator(value, this.priorityRules).then(checkStatus => {\n      if (checkStatus) {\n        resolve(checkStatus);\n      }\n    }).then(() => {\n      if (!this.required && isEmpty(value)) {\n        resolve({\n          hasError: false\n        });\n      }\n    }).then(() => validator(value, this.rules)).then(checkStatus => {\n      if (checkStatus) {\n        resolve(checkStatus);\n      }\n      resolve({\n        hasError: false\n      });\n    }));\n  }\n  pushRule(rule) {\n    var _a, _b;\n    const {\n      onValid,\n      errorMessage,\n      priority,\n      params\n    } = rule;\n    const nextRule = {\n      onValid,\n      params,\n      isAsync: rule.isAsync,\n      errorMessage: errorMessage || ((_b = (_a = this.rules) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.errorMessage)\n    };\n    if (priority) {\n      this.priorityRules.push(nextRule);\n    } else {\n      this.rules.push(nextRule);\n    }\n  }\n  addRule(onValid, errorMessage, priority) {\n    this.pushRule({\n      onValid,\n      errorMessage,\n      priority\n    });\n    return this;\n  }\n  addAsyncRule(onValid, errorMessage, priority) {\n    this.pushRule({\n      onValid,\n      isAsync: true,\n      errorMessage,\n      priority\n    });\n    return this;\n  }\n  isRequired(errorMessage = this.locale.isRequired, trim = true) {\n    this.required = true;\n    this.trim = trim;\n    this.requiredMessage = errorMessage;\n    return this;\n  }\n  isRequiredOrEmpty(errorMessage = this.locale.isRequiredOrEmpty, trim = true) {\n    this.required = true;\n    this.trim = trim;\n    this.emptyAllowed = true;\n    this.requiredMessage = errorMessage;\n    return this;\n  }\n  /**\n   * Define data verification rules based on conditions.\n   * @param validator\n   * @example\n   * MixedType().when(schema => {\n   *   return schema.filed1.check() ? NumberType().min(5) : NumberType().min(0);\n   * });\n   */\n  when(condition) {\n    this.addRule((value, data, filedName) => {\n      return condition(this.schemaSpec).check(value, data, filedName);\n    }, undefined, true);\n    return this;\n  }\n}\nexport default function getMixedType() {\n  return new MixedType();\n}","map":{"version":3,"names":["checkRequired","createValidator","createValidatorAsync","isEmpty","formatErrorMessage","locales","MixedType","constructor","name","required","requiredMessage","trim","emptyAllowed","rules","priorityRules","typeName","locale","Object","assign","mixed","setSchemaOptions","schemaSpec","value","check","data","fieldName","hasError","errorMessage","validator","checkStatus","checkAsync","Promise","resolve","then","pushRule","rule","onValid","priority","params","nextRule","isAsync","_b","_a","push","addRule","addAsyncRule","isRequired","isRequiredOrEmpty","when","condition","filedName","undefined","getMixedType"],"sources":["D:\\MERN estate\\client\\node_modules\\schema-typed\\src\\MixedType.ts"],"sourcesContent":["import {\n  SchemaDeclaration,\n  CheckResult,\n  ValidCallbackType,\n  AsyncValidCallbackType,\n  RuleType,\n  ErrorMessageType,\n  TypeName\n} from './types';\nimport {\n  checkRequired,\n  createValidator,\n  createValidatorAsync,\n  isEmpty,\n  formatErrorMessage\n} from './utils';\nimport locales, { MixedTypeLocale } from './locales';\n\nexport class MixedType<ValueType = any, DataType = any, E = ErrorMessageType, L = any> {\n  readonly typeName?: string;\n  protected required = false;\n  protected requiredMessage: E | string = '';\n  protected trim = false;\n  protected emptyAllowed = false;\n  protected rules: RuleType<ValueType, DataType, E | string>[] = [];\n  protected priorityRules: RuleType<ValueType, DataType, E | string>[] = [];\n\n  schemaSpec: SchemaDeclaration<DataType, E>;\n  value: any;\n  locale: L & MixedTypeLocale;\n\n  constructor(name?: TypeName) {\n    this.typeName = name;\n    this.locale = Object.assign(name ? locales[name] : {}, locales.mixed) as L & MixedTypeLocale;\n  }\n\n  setSchemaOptions(schemaSpec: SchemaDeclaration<DataType, E>, value: any) {\n    this.schemaSpec = schemaSpec;\n    this.value = value;\n  }\n\n  check(value: ValueType = this.value, data?: DataType, fieldName?: string | string[]) {\n    if (this.required && !checkRequired(value, this.trim, this.emptyAllowed)) {\n      return {\n        hasError: true,\n        errorMessage: formatErrorMessage(this.requiredMessage, { name: fieldName })\n      };\n    }\n\n    const validator = createValidator<ValueType, DataType, E | string>(data, fieldName);\n\n    const checkStatus = validator(value, this.priorityRules);\n\n    if (checkStatus) {\n      return checkStatus;\n    }\n\n    if (!this.required && isEmpty(value)) {\n      return { hasError: false };\n    }\n\n    return validator(value, this.rules) || { hasError: false };\n  }\n\n  checkAsync(\n    value: ValueType = this.value,\n    data?: DataType,\n    fieldName?: string | string[]\n  ): Promise<CheckResult<E | string>> {\n    if (this.required && !checkRequired(value, this.trim, this.emptyAllowed)) {\n      return Promise.resolve({\n        hasError: true,\n        errorMessage: formatErrorMessage(this.requiredMessage, { name: fieldName })\n      });\n    }\n\n    const validator = createValidatorAsync<ValueType, DataType, E | string>(data, fieldName);\n\n    return new Promise(resolve =>\n      validator(value, this.priorityRules)\n        .then((checkStatus: CheckResult<E | string> | void | null) => {\n          if (checkStatus) {\n            resolve(checkStatus);\n          }\n        })\n        .then(() => {\n          if (!this.required && isEmpty(value)) {\n            resolve({ hasError: false });\n          }\n        })\n        .then(() => validator(value, this.rules))\n        .then((checkStatus: CheckResult<E | string> | void | null) => {\n          if (checkStatus) {\n            resolve(checkStatus);\n          }\n          resolve({ hasError: false });\n        })\n    );\n  }\n  protected pushRule(rule: RuleType<ValueType, DataType, E | string>) {\n    const { onValid, errorMessage, priority, params } = rule;\n    const nextRule = {\n      onValid,\n      params,\n      isAsync: rule.isAsync,\n      errorMessage: errorMessage || this.rules?.[0]?.errorMessage\n    };\n\n    if (priority) {\n      this.priorityRules.push(nextRule);\n    } else {\n      this.rules.push(nextRule);\n    }\n  }\n  addRule(\n    onValid: ValidCallbackType<ValueType, DataType, E | string>,\n    errorMessage?: E | string,\n    priority?: boolean\n  ) {\n    this.pushRule({ onValid, errorMessage, priority });\n    return this;\n  }\n  addAsyncRule(\n    onValid: AsyncValidCallbackType<ValueType, DataType, E | string>,\n    errorMessage?: E | string,\n    priority?: boolean\n  ) {\n    this.pushRule({ onValid, isAsync: true, errorMessage, priority });\n    return this;\n  }\n  isRequired(errorMessage: E | string = this.locale.isRequired, trim = true) {\n    this.required = true;\n    this.trim = trim;\n    this.requiredMessage = errorMessage;\n    return this;\n  }\n  isRequiredOrEmpty(errorMessage: E | string = this.locale.isRequiredOrEmpty, trim = true) {\n    this.required = true;\n    this.trim = trim;\n    this.emptyAllowed = true;\n    this.requiredMessage = errorMessage;\n    return this;\n  }\n\n  /**\n   * Define data verification rules based on conditions.\n   * @param validator\n   * @example\n   * MixedType().when(schema => {\n   *   return schema.filed1.check() ? NumberType().min(5) : NumberType().min(0);\n   * });\n   */\n  when(condition: (schemaSpec: SchemaDeclaration<DataType, E>) => MixedType) {\n    this.addRule(\n      (value, data, filedName) => {\n        return condition(this.schemaSpec).check(value, data, filedName);\n      },\n      undefined,\n      true\n    );\n    return this;\n  }\n}\n\nexport default function getMixedType<DataType = any, E = ErrorMessageType>() {\n  return new MixedType<DataType, E>();\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}